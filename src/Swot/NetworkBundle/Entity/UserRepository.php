<?php

namespace Swot\NetworkBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * Returns all Users who are activated and friends of the passed user.
     * The passed user will be excluded from the list.
     * @param User $user
     * @return array
     */
    public function findFriendsOf(User $user) {
        $query = $this->getEntityManager()->createQuery(
            'SELECT u
             FROM SwotNetworkBundle:Friendship f
             JOIN SwotNetworkBundle:User u
             WHERE (
                f.userWho = :user
                OR f.userWith = :user
             )
             AND u != :user
             AND u.activated = TRUE
             '
        )
            ->setParameter("user", $user)
        ;

        $result = $query->getResult();

        return $result;
    }

    public function findRandomStrangers(User $user, $count) {

        //TODO: find random count * strangers
        //TODO: user activated
        //TODO: use query builder
    /*
        $query = $this->getEntityManager()->createQuery(
            'SELECT u
             FROM SwotNetworkBundle:User u
             JOIN SwotNetworkBundle:Friendship f
             WHERE (
                f.userWho != :user
                OR f.userWith != :user
             )
             AND u != :user
             AND u.activated = FALSE
             '
        )
            ->setParameter("user", $user)
        ;
        */
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->add('select', 'u')
            ->from('SwotNetworkBundle:User', 'u')
            ->leftJoin('SwotNetworkBundle:Friendship', 'f')
            ->where('f.userWho != :user')
            ->andWhere('f.userWith != :user')
            ->andWhere('u != :user')
            ->andWhere('u.activated = FALSE')
            ->setParameter("user", $user)
            ->setMaxResults($count * 10 );


        $result = $qb->getQuery()->getResult();
        //$result = $query->getResult();
        return $result;
    }
}
